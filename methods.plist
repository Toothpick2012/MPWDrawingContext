<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IconView</key>
	<dict>
		<key>drawMPWRect:r onContext:aContext</key>
		<string>
stdout := MPWByteStream Stdout.

nativeSize := self nativeRect mpwSize.
boundsSize := self bounds mpwSize.

nativeAspect := nativeSize x / nativeSize x.
boundsAspect := boundsSize x / boundsSize y.
nativeAspect &gt; boundsAspect ifTrue: [  scale := boundsSize x / nativeSize x. ].

nativeAspect &gt; boundsAspect  ifFalse: [  scale := boundsSize y / nativeSize y. ]. 


aContext gsave .

trans := (boundsSize - ( nativeSize * scale )) * 0.5 .

(aContext translate: trans x :trans y )  scale: scale : scale .

ellipseRect := 32 @ 38 extent: 448 @ 448 .
aContext  setShadowOffset: (0 @ (-8 * scale)) blur: (scale*12) color:(aContext colorGray:0 alpha: 0.75).
aContext setFillColorGray: 0.9 alpha: 1.0 .

(aContext ellipseInRect: ellipseRect) fill .
aContext clearShadow.

(aContext ellipseInRect: ellipseRect) clip .

endPoint :=   ellipseRect origin  + ( 0  @ ellipseRect height).
colors := #( 1.0 0.82 ) collect: [ :gray |  aContext colorGray:gray alpha: 1.0 ].

aContext drawLinearGradientFrom: ellipseRect origin  to: endPoint colors: colors offsets: #( 1.0 0.0 ) .

borderGradient := (NSGradient alloc initWithStartingColor:(NSColor colorWithCalibratedWhite:1.0 alpha:1.0) endingColor: (NSColor colorWithCalibratedWhite:0.82 alpha:1.0) ) autorelease.


ellipseCenterRect :=  ellipseRect inset: 16.

aContext setFillColorGray:0.0 alpha:1.0.
(aContext ellipseInRect:ellipseCenterRect) fill .
(aContext ellipseInRect:ellipseCenterRect) clip .

centerPoint := ellipseCenterRect center   - (0 @ (0.2  * ellipseCenterRect height )).

colors := NSMutableArray array.
colors addObject: ( aContext colorRed:0 green:0.94 blue:0.82 alpha:1.0 ).
colors addObject: ( aContext colorRed:0 green:0.62 blue:0.56  alpha:1.0 ).
colors addObject: ( aContext colorRed:0 green:0.05 blue:0.35  alpha:1.0 ).
colors addObject: ( aContext colorRed:0 green:0.0 blue:0.0 alpha:1.0 ).
radius := 0.8 * ellipseCenterRect height .

aContext drawRadialGradientFrom: centerPoint radius:0.0
                                 to:centerPoint radius: radius
                             colors:colors
                            offsets: #( 0.0 0.35 0.6 0.7).

centerPoint :=    ellipseCenterRect  center + (0 @ (0.4 * ellipseCenterRect height )).


colors := NSMutableArray array.
colors addObject: ( aContext colorRed:0 green:0.68 blue:1.0 alpha:0.75 ).
colors addObject: ( aContext colorRed:0 green:0.45 blue:0.62 alpha:0.55 ).
colors addObject: ( aContext colorRed:0 green:0.45 blue:0.62 alpha:0.0 ).

aContext drawRadialGradientFrom: centerPoint radius:0.0
                                 to:centerPoint radius: radius 
                             colors:colors
                            offsets: #( 0.0 0.25 0.4 ).

centerPoint :=  ellipseCenterRect center .

stdout print: ' ellipseCenterRect:   '  .  stdout println: ellipseCenterRect.
stdout print: ' centerPoint:   '  .  stdout println: centerPoint.


colors := NSMutableArray array.
colors addObject: ( aContext colorRed:0 green:0.9 blue:0.9 alpha:0.9 ).
colors addObject: ( aContext colorRed:0 green:0.49 blue:1.0 alpha:0.0 ).

aContext drawRadialGradientFrom: centerPoint radius:0.0
                                 to:centerPoint radius: radius
                             colors:colors
                            offsets: #( 0.0 0.85 ).

shadowOffset := 0@0.
shadowColor :=  (NSColor colorWithCalibratedWhite:0 alpha:1.0).
shadowRadius:= 12 * scale .

aContext setShadowOffset: shadowOffset blur: shadowRadius color: (aContext colorGray:0.0 alpha:1.0).


font := NSFont fontWithName:'Arial Unicode MS' size:345.
attrDict := NSMutableDictionary dictionary.
attrDict setObject:(NSColor colorWithCalibratedWhite:0.9 alpha:1.0) forKey:'NSColor'.
attrDict setObject: font forKey:'NSFont'.

floralHeart := NSString stringWithCharacter:10086.
floralHeart drawAtPoint: (130 @ 45 ) withAttributes: attrDict.

aContext clearShadow.


glossInset := 8.
glossRadius := ellipseCenterRect width * 0.5 - glossInset .
center := ellipseRect center.

arcFraction := 0.02 * 180.

arcStartPoint :=  center + ((arcFraction cos  negated ) @ ( arcFraction sin ) * glossRadius).
arcEndPoint :=  center + ((arcFraction cos  ) @ ( arcFraction sin ) * glossRadius).


glossPath := NSBezierPath alloc init autorelease.
glossPath moveToPoint: arcStartPoint.
startAngle := arcFraction .
endAngle := (180 - arcFraction ).

glossPath appendBezierPathWithArcWithCenter: center radius: glossRadius startAngle: startAngle endAngle: endAngle .

bottomArcBulgeDistance := 70.
bottomArcRadius := 2.6.
glossPath moveToPoint: arcEndPoint.
arcStart :=  center - (0@bottomArcBulgeDistance).
bottomRadius := glossRadius * bottomArcRadius.
glossPath appendBezierPathWithArcFromPoint: arcStart  toPoint:arcStartPoint radius: bottomRadius .
glossPath lineToPoint: arcStartPoint.
colors := NSMutableArray array.
#(0.85 0.5 0.05 ) do: [  :alpha | 
colors addObject: ( NSColor colorWithCalibratedWhite:1 alpha: alpha doubleValue ).]. 

glossGradient :=  (NSGradient alloc initWithColors:colors atLocationsArray: #( 0 0.5 1.0 ) colorSpace: (NSColorSpace genericGrayColorSpace ) ) autorelease. 

glossGradient drawInBezierPath:glossPath angle:-90.

aContext grestore . 

0 ifTrue: [ self drawRect1: r onContext: aContext ].</string>
	</dict>
</dict>
</plist>
